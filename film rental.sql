use film_rental;

-- 1. What is the total revenue generated from all rentals in the database? (2 Marks)

SELECT 
    SUM(amount) total_rev
FROM
    payment;

-- 2. How many rentals were made in each month_name? (2 Marks)

SELECT 
    COUNT(*) No_of_rentals, MONTHNAME(rental_date) month_name
FROM
    rental
GROUP BY 2;

-- 3.	What is the rental rate of the film with the longest title in the database? (2 Marks)

SELECT 
    title, LENGTH(title) titlelength, film_id, rental_rate
FROM
    film
GROUP BY 3
ORDER BY 2 DESC
LIMIT 1;

-- 4.	What is the average rental rate for films that were taken from the last 30 days from the date("2005-05-05 22:04:30")? (2 Marks)

SELECT 
    AVG(rental_rate) average_rental_rate
FROM
    film
WHERE
    release_year >= YEAR(SUBDATE('2005-05-05 22:04:30', 30));

-- 5. What is the most popular category of films in terms of the number of rentals? (3 Marks)

SELECT 
    COUNT(rental_id) No_of_rentals, category_id
FROM
    rental
        JOIN
    inventory USING (inventory_id)
        JOIN
    film_category USING (film_id)
GROUP BY 2
ORDER BY 1 DESC
LIMIT 1;

-- 6. Find the longest movie duration from the list of films that have not been rented by any customer. (3 Marks)
SELECT 
    MAX(length), title
FROM
    film
WHERE
    film_id NOT IN (SELECT DISTINCT
            film_id
        FROM
            rental)
GROUP BY 2;

-- 7. What is the average rental rate for films, broken down by category? (3 Marks)

SELECT 
    AVG(rental_rate) average_rental_rate, category_id
FROM
    film
        JOIN
    film_category USING (film_id)
GROUP BY 2;

-- 8.	What is the total revenue generated from rentals for each actor in the database? (3 Marks)

SELECT 
    actor_id,
    CONCAT(first_name, ' ', last_name) actor_name,
    SUM(amount) total_revenue
FROM
    payment
        JOIN
    rental USING (rental_id)
        JOIN
    inventory USING (inventory_id)
        JOIN
    film_actor USING (film_id)
        JOIN
    actor USING (actor_id)
GROUP BY 1;

-- 9.	Show all the actresses who worked in a film having a "Wrestler" in the description. (3 Marks)
-- There is no details given about the gender in the data and the question above depends on gender info only.
-- 10.	Which customers have rented the same film more than once? (3 Marks)
SELECT 
    customer_id, film_id, title, COUNT(rental_id)
FROM
    rental
        JOIN
    inventory USING (inventory_id)
        JOIN
    film USING (film_id)
GROUP BY 1 , 2
HAVING COUNT(rental_id) > 1
ORDER BY COUNT(rental_id) DESC;

-- 11.	How many films in the comedy category have a rental rate higher than the average rental rate? (3 Marks)

SELECT 
    COUNT(*) No_of_films
FROM
    film
        JOIN
    film_category USING (film_id)
        JOIN
    category USING (category_id)
WHERE
    name = 'comedy'
        AND rental_rate > (SELECT 
            AVG(rental_rate)
        FROM
            film);

-- 12.	Which films have been rented the most by customers living in each city? (3 Marks)

SELECT 
    city, title, COUNT(rental_id) No_of_rentals
FROM
    film
        JOIN
    inventory USING (film_id)
        JOIN
    rental USING (inventory_id)
        JOIN
    customer USING (customer_id)
        JOIN
    address USING (address_id)
        JOIN
    city USING (city_id)
GROUP BY 1 , 2
HAVING COUNT(rental_id) >= 1
ORDER BY COUNT(rental_id) DESC;

-- 13.	What is the total amount spent by customers whose rental payments exceed $200? (3 Marks)

SELECT 
    SUM(amount) total_amount, customer_id
FROM
    payment
WHERE
    customer_id IN (SELECT 
            customer_id
        FROM
            payment
        WHERE
            amount > 200)
GROUP BY 2;

-- 14.	Display the fields which are having foreign key constraints related to the "rental" table. [Hint: using Information_schema] (2 Marks)

SELECT
    COLUMN_NAME,
    REFERENCED_TABLE_NAME,
    REFERENCED_COLUMN_NAME
FROM
    INFORMATION_SCHEMA.KEY_COLUMN_USAGE
WHERE
    TABLE_NAME = 'rental'
    AND CONSTRAINT_NAME LIKE '%fk%';

-- 15.	Create a View for the total revenue generated by each staff member, broken down by store city with the country name. (4 Marks)

CREATE VIEW staff_revenue AS
    (SELECT 
        SUM(amount) total_revenue,
        staff_id,
        first_name,
        last_name,
        city,
        country
    FROM
        payment
            JOIN
        staff USING (staff_id)
            JOIN
        address USING (address_id)
            JOIN
        city USING (city_id)
            JOIN
        country USING (country_id)
    GROUP BY 2 , 5 , 6);

-- 16.	Create a view based on rental information consisting of visiting_day, customer_name, the title of the film,  no_of_rental_days, the amount paid by the customer along with the percentage of customer spending. (4 Marks)
CREATE VIEW rental_info AS
    (SELECT 
        r.rental_id,
        CONCAT(first_name, ' ', last_name) customer_name,
        rental_date visiting_day,
        title,
        DATEDIFF(return_date, rental_date) no_of_rental_days,
        amount,
        (amount / (SELECT 
                SUM(amount)
            FROM
                payment)) * 100 spending_percentage
    FROM
        film f
            JOIN
        inventory i ON f.film_id = i.film_id
            JOIN
        rental r ON i.inventory_id = r.inventory_id
            JOIN
        payment p ON r.rental_id = p.rental_id
            JOIN
        customer c ON p.customer_id = c.customer_id);

-- 17.	Display the customers who paid 50% of their total rental costs within one day. (5 Marks)

SELECT
    c.customer_id,
    CONCAT(first_name, ' ', last_name) AS customer_name,
    r.rental_id,
    rental_date,
    SUM(amount) AS total_payment,
    DATEDIFF(MAX(payment_date), MIN(rental_date)) AS days_difference
FROM
    customer c
JOIN
    rental r ON c.customer_id = r.customer_id
JOIN
    payment p ON r.rental_id = p.rental_id
GROUP BY
    c.customer_id, r.rental_id
HAVING
    total_payment >= 0.5 * (SELECT SUM(amount) FROM payment WHERE rental_id = r.rental_id)
    AND days_difference = 0;
